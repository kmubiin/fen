markup/source.txt
====================

A single text file to experiment markup languages.
Markups are selective and chosen by either compatible or
similar use cases. Subject to personal preference.

This file is shown by one of these symbolic links:

? [Markdown](readme.md)
from the [markup directory](..)

? `reStructuredText <readme.rst>`_
from the `markup directory <..>`_

? link:readme.adoc[AsciiDoc]
from the link:..[markup directory]

--------------------
Title text
--------------------

ATX heading: Title text uses prefix with/without matching
pair, of ``#`` (Markdown, AsciiDoc) or ``=`` (AsciiDoc).

Setext heading: Title text uses underline with/without
overline, of ``=`` and ``-`` (Markdown, reStructuredText),
or any punctuation characters (reStructuredText), which
corresponds to the title level and order.

--------------------
Simple text
--------------------

This is a paragraph.

Paragraphs line up on the left, and are normally separated
by blank lines.

Paragraphs indented by some spaces may be:

 literal paragraphs (AsciiDoc)
 indented by at least one space;
 spaces and newlines are preserved;
 or,

    literal blocks or code blocks (Markdown)
    indented by at least four spaces;
    newlines may not be preserved;
    or,

    block quotes (reStructuredText)

        and each block may follow another block.

--------------------
Marker text
--------------------

A thematic break or transition marker is made of horizontal
lines of repeated punctuation characters. That lines up on
the left, and if properly used, found between paragraphs.

``---`` (Markdown, AsciiDoc)

---

``----`` (reStructuredText; delimited block in AsciiDoc)

Repeated punctuation often use hyphen or minus, but some
markup languages may allow or restrict other characters.

``'''`` (AsciiDoc)

'''

``''''`` (reStructuredText)

''''

Either three or four characters are the minimum to draw
the marker text. AsciiDoc needs three or more, whilst
reStructuredText needs four or more; therefore, the fours
``''''`` would be valid for both markups.

``___`` (Markdown)

``____`` (reStructuredText; block quotes in AsciiDoc)

``***`` (Markdown; invalid in reStructuredText)

``****`` (reStructuredText; sidebar block in AsciiDoc)

Here, some unwanted results in AsciiDoc: some literal
characters are missing. AsciiDoc allows unconstrained
inline formatting, therefore such repeated characters
without any text in-between may appear so.

--------------------
Inline text
--------------------

\`interpreted text` (inline literal in Markdown)

? `interpreted text`

\`\`inline literal\`\` (reStructuredText, AsciiDoc)

? ``inline literal``

Emphasis, which may be bold or italic, is made of asterisk
and underscore characters. That may be valid, with or
without spaces between the characters and free text, for
some markup languages.

\*emphasis*

? *emphasis*

\**emphasis\*\* and more\*\*emphasis\*\*

? **emphasis** and more**emphasis**

Emphasis paired by one character is usually italic, and
paired by two characters is usually bold. Except, AsciiDoc
specifies asterisk for bold and underscore for italic, and
disregard the character count.

\_emphasis\_ (Markdown, AsciiDoc)

? _emphasis_

\__emphasis\_\_ and more\__emphasis\_\_ (AsciiDoc)

? __emphasis__ and more__emphasis__

Inline text that uses underscore character has different
interpretations: italic in Markdown and AsciiDoc; and
reference, including hyperlink, in reStructuredText.

\^super^script (AsciiDoc)

? ^super^script

\~sub\~script or \~line through\~ (AsciiDoc; else Markdown)

? ~sub~script or ~line through~

\#highlight text# and more\##highlight\#\# (AsciiDoc)

? #highlight text# and more##highlight##

\[.underline]\#text# and \[.line-through]\#text# (AsciiDoc)

? [.underline]#text# and [.line-through]#text#

--------------------
Itemize text
--------------------

A list of text is made of one or more punctuation characters
and followed by free text. That lines up on the left, and
each list is separated by a blank line (reStructuredText),
or the different character, of ``*``, ``-``, or ``+``.

* Item one asterisk
* Item two asterisk

The list of text can be ordered, normally by adding a
numeric character before a delimiter of ``.`` or ``)``
and followed by free text similarly.

1. Item one period
2. Item two period

#. Item hash period (auto-enumerated in reStructuredText)

The delimiter itself is enough to make an unordered list
of ``*``, or an ordered list of ``.`` in AsciiDoc.

. Item level one period
.. Item level two periods
... Item level three periods
.... Item level four periods
..... Item level five periods (nested max in AsciiDoc)
. Item level one periods, number two

Both ordered and unordered lists may be combined to make a
nested list in some markup languages.

1) Item one right bracket
   - Nested item one minus
   - Nested item two minus
2) Item two right bracket

Unordered list can be made into a checklist by adding a
pair of square brackets, and insert a check character ``x``
or leave a blank between the brackets.

- [x] Item checked by lowercase x (or asterisk in AsciiDoc)
- [ ] Item not checked
- Item without square brackets

[TESTING IN PROGRESS]
