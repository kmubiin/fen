markup/source.txt
====================

A single text file to experiment markup languages.
Markups are selective and chosen by either compatible or
similar use cases. Use any markup tools to preview the
result, which may vary by implementation.

Markup is indicated by any of these symbolic links:

? [Markdown](readme.md)
from the [markup directory](..)

? `reStructuredText <readme.rst>`_
from the `markup directory <..>`_

? link:readme.adoc[AsciiDoc]
from the link:..[markup directory]

CAUTION: This document was prepared for testing markups at
convenience, by own initiative. Do not use as a reference.
For full specifications and reference, check the official
documentation for the markup languages.

--------------------
Simple text
--------------------

This is a paragraph.

Paragraphs line up on the left, and are normally separated
by blank lines.

Paragraphs indented by some spaces may be:

 literal paragraphs (AsciiDoc)
 indented by at least one space;
 spaces and newlines are preserved;
 or,

    literal blocks or code blocks (Markdown)
    indented by at least four spaces;
    newlines may not be preserved;
    or,

    block quotes (reStructuredText)

        and each block may follow another block.

--------------------
Title text
--------------------

ATX heading: Title text uses prefix with/without matching
pair, of ``#`` (Markdown, AsciiDoc) or ``=`` (AsciiDoc).
Repeated markup characters, from one to six, correspond to
respective title level and order.

``=`` (heading 1 or document title)

``==`` (heading 2 or first section)

``===`` (heading 3)

``====`` (heading 4)

``=====`` (heading 5)

``======`` (heading 6)

Setext heading: Title text uses underline with/without
overline, of ``=`` and ``-``, and some punctuation
characters. Different markup characters correspond to
respective title level and order.

``= - ` : ' " ~ ^ _ * + # < >`` (reStructuredText)

``= - ~ ^ +`` (AsciiDoc; deprecated?)

NOTE: The pairing of grave accent may be ignored or
misinterpreted. This could happen when trying to convert the
source text between different markup languages.

--------------------
Marker text
--------------------

A thematic break or transition marker is made of horizontal
lines of repeated punctuation characters. That lines up on
the left, and if properly used, found between paragraphs.

``---`` (Markdown, AsciiDoc)

---

``----`` (reStructuredText; delimited block in AsciiDoc)

Repeated punctuation often use hyphen or minus, but some
markup languages may allow or restrict other characters.

``'''`` (AsciiDoc)

'''

``''''`` (reStructuredText)

''''

Either three or four characters are the minimum to draw
the marker text. In above markups, the fours ``''''`` would
be valid for both AsciiDoc and reStructuredText.

``___`` (Markdown)

``____`` (reStructuredText; block quotes in AsciiDoc)

``***`` (Markdown; invalid in reStructuredText)

``****`` (reStructuredText; sidebar block in AsciiDoc)

NOTE: Some repeated characters without any text in-between
may be missing. This could happen in AsciiDoc, otherwise
literal as is in Markdown and reStructuredText.

--------------------
Inline text
--------------------

\`interpreted text` (inline literal in Markdown)

? `interpreted text`

\`\`inline literal\`\` (reStructuredText, AsciiDoc)

? ``inline literal``

Emphasis, which may be bold or italic, is made of asterisk
and underscore characters. That may be valid, with or
without spaces between the characters and free text, for
some markup languages.

\*emphasis*

? *emphasis*

\*\*emphasis\*\* and more\*\*emphasis\*\*

? **emphasis** and more**emphasis**

Emphasis paired by one character is usually italic, and
paired by two characters is usually bold. Except, AsciiDoc
specifies asterisk for bold and underscore for italic, and
disregard the character count.

\_emphasis\_ (Markdown, AsciiDoc)

\_\_emphasis\_\_ and more\_\_emphasis\_\_ (Markdown;
else AsciiDoc)

NOTE: Inline text that uses underscore character has
different interpretations: italic in Markdown and AsciiDoc;
and reference, including hyperlink, in reStructuredText.

\^super^script (AsciiDoc; else Markdown)

? ^super^script

\~sub\~script or \~line through\~ (AsciiDoc; else Markdown)

? ~sub~script or ~line through~

\#highlight text# and more\##highlight\#\# (AsciiDoc)

\[.underline]\#text# and \[.line-through]\#text# (AsciiDoc)

Escaping inline text may not work similarly. For example,
this will not \*emphasis* (or not more\\**emphasis**) when
escaped by a single ``\`` (or double ``\\``) backslash. The
result will be different in some markup languages.

NOTE: Repeated characters with single backslash each in this
\*\*emphasis\*\* will escape properly in Markdown, and only
a double backslash will escape properly in AsciiDoc.

--------------------
Itemize text
--------------------

A list of text is made of one or more punctuation characters
and followed by free text. That lines up on the left, and
each list is separated by a blank line (reStructuredText),
or the different character, of ``*``, ``-``, or ``+``.

* Item one asterisk
* Item two asterisk

The list of text can be ordered, normally by adding a
numeric character before a delimiter of ``.`` or ``)``
and followed by free text similarly.

1. Item one period
2. Item two period

The number sign or hash before the delimiter will be
auto-enumerated in reStructuredText. Self-numbering and
offset numbering are both valid in some markup languages.

3. Item three period
4. Item four period
#. Item hash period, following number

The delimiter ``*`` or ``.`` itself, each one or more, can
make an unordered list or an ordered list in AsciiDoc.

. Item level one period
.. Item level two periods
... Item level three periods
.... Item level four periods
..... Item level five periods (nested max in AsciiDoc)
. Item level one period, number two

Both ordered and unordered lists may be combined to make a
nested list in some markup languages.

1) Item one right bracket
   - Nested item one minus
   - Nested item two minus
2) Item two right bracket

Unordered list can be made into a checklist by adding a
pair of square brackets. Then, either leave a blank or,
insert a checked character ``x`` between the brackets.

- [ ] Item not checked
- [x] Item checked by lowercase x (Markdown, AsciiDoc)
- [*] Item checked by asterisk (AsciiDoc)
- Item without square brackets

--------------------
Block text
--------------------

A list of term with definition, in the simplest form, is
made of a single line and followed by a paragraph indented
by two spaces in the next line.

term A
  with definition in the next line (reStructuredText).

term B
  with definition in the next line
  and continues in the following line.

Otherwise, the single line is followed by a colon (or pair
of colons) and a space characters at the end of same line,
or at the beginning of paragraph in the next line.

term C:: with definition in the same line (AsciiDoc).

term D
: with definition in the next line (Markdown).

Some markup language may allow to include several terms or
definitions next to each other, unlike the simplest form.

term E::
with definition in the next line (AsciiDoc).
and additional definition in the following line.

term F
term G
: with definition in the next line for (Markdown).

term H
: with definition in the next line (Markdown).
: and another definition in the following line.

**'Block text' may be continued**

END OF DOCUMENT
====================
